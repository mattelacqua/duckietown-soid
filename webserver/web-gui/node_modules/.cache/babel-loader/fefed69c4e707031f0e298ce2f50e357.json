{"ast":null,"code":"var _jsxFileName = \"/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js\";\n// Import styplesheet for App\nimport './App.css'; // Import React for components\n\nimport React from 'react'; // Import styles (contains stuff for knob\n\nimport Agent from './Agent.js'; // Our top level class (gets rendered in index.html)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  // Constructor for component (set up what our App's state is)\n  constructor(props) {\n    super(props); // State contains a list of agents (json format), and a bool for if the data loaded\n\n    this.state = {\n      agents: [],\n      DataisLoaded: false\n    };\n  } // When we renderour App, fetch the agent information\n\n\n  componentDidMount() {\n    fetch(\"/agents\").then(res => res.json()).then(json => {\n      this.setState({\n        agents: json,\n        DataisLoaded: true\n      });\n    });\n  } // Render Our App Component ( calls to Agent subchildren)\n\n\n  render() {\n    const {\n      DataisLoaded,\n      agents\n    } = this.state; // If our data didn't load, lets wait\n\n    if (!DataisLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Please wait some time.... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 35\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Fetch data from an api in reacts \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), \" \", agents.map(agent => /*#__PURE__*/_jsxDEV(Agent, {\n        agent_id: agent.agent_id,\n        cur_angle: agent.cur_angle,\n        cur_pos: agent.cur_pos,\n        color: agent.color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Agent","App","Component","constructor","props","state","agents","DataisLoaded","componentDidMount","fetch","then","res","json","setState","render","map","agent","agent_id","cur_angle","cur_pos","color"],"sources":["/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js"],"sourcesContent":["// Import styplesheet for App\nimport './App.css';\n\n// Import React for components\nimport React from 'react'\n\n// Import styles (contains stuff for knob\nimport Agent from './Agent.js'\n\n// Our top level class (gets rendered in index.html)\nclass App extends React.Component{\n\n    // Constructor for component (set up what our App's state is)\n    constructor(props) {\n        super(props);\n   \n        // State contains a list of agents (json format), and a bool for if the data loaded\n        this.state = {\n            agents: [],\n            DataisLoaded: false\n        };\n    }\n\n    // When we renderour App, fetch the agent information\n    componentDidMount() {\n        fetch(\"/agents\")\n            .then((res) => res.json())\n            .then((json) => {\n                this.setState({\n                    agents: json,\n                    DataisLoaded: true\n                });\n            })\n    }\n\n    // Render Our App Component ( calls to Agent subchildren)\n    render() {\n        const { DataisLoaded, agents } = this.state;\n        \n        // If our data didn't load, lets wait\n        if (!DataisLoaded) return <div>\n            <h1> Please wait some time.... </h1> </div> ;\n   \n        return (\n        <div className = \"App\">\n            <h1> Fetch data from an api in reacts </h1> {\n                agents.map((agent) => ( \n                \n                    <Agent agent_id={agent.agent_id} \n                           cur_angle={agent.cur_angle}\n                           cur_pos={agent.cur_pos}\n                           color={agent.color} />\n                    \n                ))\n            }\n        </div>\n    );\n}\n}\n\n\nexport default App;\n"],"mappings":";AAAA;AACA,OAAO,WAAP,C,CAEA;;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;;;AACA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAiC;EAE7B;EACAC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN,EADe,CAGf;;IACA,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE,EADC;MAETC,YAAY,EAAE;IAFL,CAAb;EAIH,CAX4B,CAa7B;;;EACAC,iBAAiB,GAAG;IAChBC,KAAK,CAAC,SAAD,CAAL,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWE,IAAD,IAAU;MACZ,KAAKC,QAAL,CAAc;QACVP,MAAM,EAAEM,IADE;QAEVL,YAAY,EAAE;MAFJ,CAAd;IAIH,CAPL;EAQH,CAvB4B,CAyB7B;;;EACAO,MAAM,GAAG;IACL,MAAM;MAAEP,YAAF;MAAgBD;IAAhB,IAA2B,KAAKD,KAAtC,CADK,CAGL;;IACA,IAAI,CAACE,YAAL,EAAmB,oBAAO;MAAA,wBACtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADsB;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;IAGnB,oBACA;MAAK,SAAS,EAAG,KAAjB;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,OAEQD,MAAM,CAACS,GAAP,CAAYC,KAAD,iBAEP,QAAC,KAAD;QAAO,QAAQ,EAAEA,KAAK,CAACC,QAAvB;QACO,SAAS,EAAED,KAAK,CAACE,SADxB;QAEO,OAAO,EAAEF,KAAK,CAACG,OAFtB;QAGO,KAAK,EAAEH,KAAK,CAACI;MAHpB;QAAA;QAAA;QAAA;MAAA,QAFJ,CAFR;IAAA;MAAA;MAAA;MAAA;IAAA,QADA;EAcP;;AA/CgC;;AAmDjC,eAAenB,GAAf"},"metadata":{},"sourceType":"module"}