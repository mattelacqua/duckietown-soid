{"ast":null,"code":"var _jsxFileName = \"/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js\";\n// Import styplesheet for App\nimport './App.css'; // Import React for components\n\nimport React from 'react'; // Import Agent since it will be rendered in appb\n\nimport Agent from './Agent.js'; // Import Environment since it will be rendered in app\n\nimport Environment from './Environment.js'; // Our top level class (gets rendered in index.html)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  // Constructor for component (set up what our App's state is)\n  constructor(props) {\n    super(props); // State contains a list of agents (json format), and a bool for if the data loaded\n\n    this.state = {\n      agents: [],\n      environment: {},\n      DataisLoaded: false\n    };\n  } // When we renderour App, fetch the agent information\n\n\n  componentDidMount() {\n    // Fetch from our proxy (webserver.py, which when /agents is loaded will return our agents json information),\n    fetch(\"/agents\") // Shorthand for http://localhost:5000/agetns\n    .then(res => res.json()) // Result becomes a json\n    .then(json => {\n      // take the json and set the state vars with it\n      this.setState({\n        agents: json,\n        DataisLoaded: true\n      });\n    });\n  } // Render Our App Component ( calls to Agent subchildren)\n\n\n  render() {\n    // Pull agents and the data loaded from our state (these were set in componentDidMount)\n    const {\n      DataisLoaded,\n      agents\n    } = this.state; // If our data didn't load, lets write HTML that we are waiting \n\n    if (!DataisLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Please wait some time.... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 35\n    }, this); // When our data is loaded, we want to return the HTML/REACT Calls for the APP\n\n    return (\n      /*#__PURE__*/\n      // Div to clump app up into one component to render\n      _jsxDEV(\"div\", {\n        className: \"App\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Fetch data from an api in reacts \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), \" \",\n        /* For every agent */\n        agents.map(agent =>\n        /*#__PURE__*/\n\n        /* Render an Agent component, with props: agent_id, cur_angle, cur_pos, color */\n        _jsxDEV(Agent, {\n          agent_id: agent.agent_id,\n          cur_angle: agent.cur_angle,\n          cur_pos: agent.cur_pos,\n          color: agent.color,\n          lights: agent.lights\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    ); // End of return\n  }\n\n} // Allow it to be called in other functions\n\n\nexport default App;","map":{"version":3,"names":["React","Agent","Environment","App","Component","constructor","props","state","agents","environment","DataisLoaded","componentDidMount","fetch","then","res","json","setState","render","map","agent","agent_id","cur_angle","cur_pos","color","lights"],"sources":["/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js"],"sourcesContent":["// Import styplesheet for App\nimport './App.css';\n\n// Import React for components\nimport React from 'react'\n\n// Import Agent since it will be rendered in appb\nimport Agent from './Agent.js'\n\n// Import Environment since it will be rendered in app\nimport Environment from './Environment.js'\n\n// Our top level class (gets rendered in index.html)\nclass App extends React.Component{\n\n    // Constructor for component (set up what our App's state is)\n    constructor(props) {\n        super(props);\n   \n        // State contains a list of agents (json format), and a bool for if the data loaded\n        this.state = {\n            agents: [],\n            environment: {},\n            DataisLoaded: false\n        };\n    }\n\n    // When we renderour App, fetch the agent information\n    componentDidMount() {\n        // Fetch from our proxy (webserver.py, which when /agents is loaded will return our agents json information),\n        fetch(\"/agents\") // Shorthand for http://localhost:5000/agetns\n            .then((res) => res.json()) // Result becomes a json\n            .then((json) => { // take the json and set the state vars with it\n                this.setState({\n                    agents: json,\n                    DataisLoaded: true\n                });\n            })\n    }\n\n    // Render Our App Component ( calls to Agent subchildren)\n    render() {\n        \n        // Pull agents and the data loaded from our state (these were set in componentDidMount)\n        const { DataisLoaded, agents } = this.state;\n        \n        // If our data didn't load, lets write HTML that we are waiting \n        if (!DataisLoaded) return <div>\n            <h1> Please wait some time.... </h1> </div> ;\n   \n        // When our data is loaded, we want to return the HTML/REACT Calls for the APP\n        return (\n\n        // Div to clump app up into one component to render\n        <div className = \"App\"> {/* Using app.css stylesheet */}\n            {/* Header text */}\n            <h1> Fetch data from an api in reacts </h1> {\n                /* For every agent */\n                agents.map((agent) => ( \n                    /* Render an Agent component, with props: agent_id, cur_angle, cur_pos, color */\n                    <Agent agent_id={agent.agent_id} \n                           cur_angle={agent.cur_angle}\n                           cur_pos={agent.cur_pos}\n                           color={agent.color} \n                           lights={agent.lights} />\n                ))\n            }\n        </div>\n    ); // End of return\n}\n}\n\n\n// Allow it to be called in other functions\nexport default App;\n"],"mappings":";AAAA;AACA,OAAO,WAAP,C,CAEA;;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,kBAAxB,C,CAEA;;;;AACA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAiC;EAE7B;EACAC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN,EADe,CAGf;;IACA,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE,EADC;MAETC,WAAW,EAAE,EAFJ;MAGTC,YAAY,EAAE;IAHL,CAAb;EAKH,CAZ4B,CAc7B;;;EACAC,iBAAiB,GAAG;IAChB;IACAC,KAAK,CAAC,SAAD,CAAL,CAAiB;IAAjB,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAC+B;IAD/B,CAEKF,IAFL,CAEWE,IAAD,IAAU;MAAE;MACd,KAAKC,QAAL,CAAc;QACVR,MAAM,EAAEO,IADE;QAEVL,YAAY,EAAE;MAFJ,CAAd;IAIH,CAPL;EAQH,CAzB4B,CA2B7B;;;EACAO,MAAM,GAAG;IAEL;IACA,MAAM;MAAEP,YAAF;MAAgBF;IAAhB,IAA2B,KAAKD,KAAtC,CAHK,CAKL;;IACA,IAAI,CAACG,YAAL,EAAmB,oBAAO;MAAA,wBACtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADsB;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CANd,CASL;;IACA;MAAA;MAEA;MACA;QAAK,SAAS,EAAG,KAAjB;QAAA,6BAEI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ;QAGQ;QACAF,MAAM,CAACU,GAAP,CAAYC,KAAD;QAAA;;QACP;QACA,QAAC,KAAD;UAAO,QAAQ,EAAEA,KAAK,CAACC,QAAvB;UACO,SAAS,EAAED,KAAK,CAACE,SADxB;UAEO,OAAO,EAAEF,KAAK,CAACG,OAFtB;UAGO,KAAK,EAAEH,KAAK,CAACI,KAHpB;UAIO,MAAM,EAAEJ,KAAK,CAACK;QAJrB;UAAA;UAAA;UAAA;QAAA,QAFJ,CAJR;MAAA;QAAA;QAAA;QAAA;MAAA;IAHA,EAVK,CA2BN;EACN;;AAxDgC,C,CA4DjC;;;AACA,eAAerB,GAAf"},"metadata":{},"sourceType":"module"}