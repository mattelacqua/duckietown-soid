{"ast":null,"code":"/**\n *\n * @namespace faker.address\n */\nfunction Address(faker) {\n  var f = faker.fake,\n      Helpers = faker.helpers;\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n\n  this.zipCode = function (format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n\n    return Helpers.replaceSymbols(format);\n  };\n  /**\n   * Generates random zipcode from state abbreviation. If state abbreviation is\n   * not specified, a random zip code is generated according to the locale's zip format.\n   * Only works for locales with postcode_by_state definition. If a locale does not\n   * have a postcode_by_state definition, a random zip code is generated according\n   * to the locale's zip format.\n   *\n   * @method faker.address.zipCodeByState\n   * @param {String} state\n   */\n\n\n  this.zipCodeByState = function (state) {\n    var zipRange = faker.definitions.address.postcode_by_state[state];\n\n    if (zipRange) {\n      return faker.datatype.number(zipRange);\n    }\n\n    return faker.address.zipCode();\n  };\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   *\n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   * * `{{address.cityName}}` when city name is available\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n\n\n  this.city = function (format) {\n    var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];\n\n    if (!format && faker.definitions.address.city_name) {\n      formats.push('{{address.cityName}}');\n    }\n\n    if (typeof format !== \"number\") {\n      format = faker.datatype.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n  };\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n\n\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  };\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n\n\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  };\n  /**\n   * Returns a random city name\n   * \n   * @method faker.address.cityName\n   */\n\n\n  this.cityName = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_name);\n  };\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n\n\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix;\n    }\n\n    switch (faker.datatype.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n\n    return result;\n  }; //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n\n\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n\n    var address = \"\";\n\n    switch (faker.datatype.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n\n    return useFullAddress ? address + \" \" + faker.address.secondaryAddress() : address;\n  };\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n\n\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  };\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n\n\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  };\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n\n\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));\n  };\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n\n\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  };\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n\n\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  };\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   * @param {string} alphaCode default alpha-2\n   */\n\n\n  this.countryCode = function (alphaCode) {\n    if (typeof alphaCode === 'undefined' || alphaCode === 'alpha-2') {\n      return faker.random.arrayElement(faker.definitions.address.country_code);\n    }\n\n    if (alphaCode === 'alpha-3') {\n      return faker.random.arrayElement(faker.definitions.address.country_code_alpha_3);\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  };\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n\n\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  };\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n\n\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  };\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   * @param {Double} max default is 90\n   * @param {Double} min default is -90\n   * @param {number} precision default is 4\n   */\n\n\n  this.latitude = function (max, min, precision) {\n    max = max || 90;\n    min = min || -90;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   * @param {Double} max default is 180\n   * @param {Double} min default is -180\n   * @param {number} precision default is 4\n   */\n\n\n  this.longitude = function (max, min, precision) {\n    max = max || 180;\n    min = min || -180;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n  /**\n   *  direction\n   *\n   * @method faker.address.direction\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n\n  this.direction = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction);\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr);\n  };\n\n  this.direction.schema = {\n    \"description\": \"Generates a direction. Use optional useAbbr bool to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"South\", \"SW\", \"E\"]\n  };\n  /**\n   * cardinal direction\n   *\n   * @method faker.address.cardinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n  this.cardinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(0, 4));\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(0, 4));\n  };\n\n  this.cardinalDirection.schema = {\n    \"description\": \"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"North\", \"South\", \"E\", \"W\"]\n  };\n  /**\n   * ordinal direction\n   *\n   * @method faker.address.ordinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n  this.ordinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(4, 8));\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(4, 8));\n  };\n\n  this.ordinalDirection.schema = {\n    \"description\": \"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"Southeast\", \"SW\", \"NE\"]\n  };\n\n  this.nearbyGPSCoordinate = function (coordinate, radius, isMetric) {\n    function randomFloat(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI / 180.0);\n    }\n\n    function radiansToDegrees(radians) {\n      return radians * (180.0 / Math.PI);\n    }\n\n    function kilometersToMiles(miles) {\n      return miles * 0.621371;\n    }\n\n    function coordinateWithOffset(coordinate, bearing, distance, isMetric) {\n      var R = 6378.137; // Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)\n\n      var d = isMetric ? distance : kilometersToMiles(distance); // Distance in km\n\n      var lat1 = degreesToRadians(coordinate[0]); //Current lat point converted to radians\n\n      var lon1 = degreesToRadians(coordinate[1]); //Current long point converted to radians\n\n      var lat2 = Math.asin(Math.sin(lat1) * Math.cos(d / R) + Math.cos(lat1) * Math.sin(d / R) * Math.cos(bearing));\n      var lon2 = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(d / R) * Math.cos(lat1), Math.cos(d / R) - Math.sin(lat1) * Math.sin(lat2)); // Keep longitude in range [-180, 180]\n\n      if (lon2 > degreesToRadians(180)) {\n        lon2 = lon2 - degreesToRadians(360);\n      } else if (lon2 < degreesToRadians(-180)) {\n        lon2 = lon2 + degreesToRadians(360);\n      }\n\n      return [radiansToDegrees(lat2), radiansToDegrees(lon2)];\n    } // If there is no coordinate, the best we can do is return a random GPS coordinate.\n\n\n    if (coordinate === undefined) {\n      return [faker.address.latitude(), faker.address.longitude()];\n    }\n\n    radius = radius || 10.0;\n    isMetric = isMetric || false; // TODO: implement either a gaussian/uniform distribution of points in cicular region.\n    // Possibly include param to function that allows user to choose between distributions.\n    // This approach will likely result in a higher density of points near the center.\n\n    var randomCoord = coordinateWithOffset(coordinate, degreesToRadians(Math.random() * 360.0), radius, isMetric);\n    return [randomCoord[0].toFixed(4), randomCoord[1].toFixed(4)];\n  };\n  /**\n     * Return a random time zone\n     * @method faker.address.timeZone\n     */\n\n\n  this.timeZone = function () {\n    return faker.random.arrayElement(faker.definitions.address.time_zone);\n  };\n\n  return this;\n}\n\nmodule.exports = Address;","map":{"version":3,"names":["Address","faker","f","fake","Helpers","helpers","zipCode","format","localeFormat","definitions","address","postcode","random","arrayElement","replaceSymbols","zipCodeByState","state","zipRange","postcode_by_state","datatype","number","city","formats","city_name","push","length","cityPrefix","city_prefix","citySuffix","city_suffix","cityName","streetName","result","suffix","streetSuffix","name","lastName","firstName","streetAddress","useFullAddress","undefined","replaceSymbolWithNumber","secondaryAddress","street_suffix","streetPrefix","street_prefix","county","country","countryCode","alphaCode","country_code","country_code_alpha_3","useAbbr","stateAbbr","state_abbr","latitude","max","min","precision","parseFloat","toPrecision","toFixed","longitude","direction","direction_abbr","schema","cardinalDirection","slice","ordinalDirection","nearbyGPSCoordinate","coordinate","radius","isMetric","randomFloat","Math","degreesToRadians","degrees","PI","radiansToDegrees","radians","kilometersToMiles","miles","coordinateWithOffset","bearing","distance","R","d","lat1","lon1","lat2","asin","sin","cos","lon2","atan2","randomCoord","timeZone","time_zone","module","exports"],"sources":["/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/node_modules/faker/lib/address.js"],"sourcesContent":["/**\n *\n * @namespace faker.address\n */\nfunction Address (faker) {\n  var f = faker.fake,\n    Helpers = faker.helpers;\n\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n  this.zipCode = function(format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n    return Helpers.replaceSymbols(format);\n  }\n\n  /**\n   * Generates random zipcode from state abbreviation. If state abbreviation is\n   * not specified, a random zip code is generated according to the locale's zip format.\n   * Only works for locales with postcode_by_state definition. If a locale does not\n   * have a postcode_by_state definition, a random zip code is generated according\n   * to the locale's zip format.\n   *\n   * @method faker.address.zipCodeByState\n   * @param {String} state\n   */\n  this.zipCodeByState = function (state) {\n    var zipRange = faker.definitions.address.postcode_by_state[state];\n    if (zipRange) {\n      return faker.datatype.number(zipRange);\n    }\n    return faker.address.zipCode();\n  }\n\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   *\n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   * * `{{address.cityName}}` when city name is available\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n  this.city = function (format) {\n    var formats = [\n      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',\n      '{{address.cityPrefix}} {{name.firstName}}',\n      '{{name.firstName}}{{address.citySuffix}}',\n      '{{name.lastName}}{{address.citySuffix}}'\n    ];\n\n    if (!format && faker.definitions.address.city_name) {\n      formats.push('{{address.cityName}}');\n    }\n\n    if (typeof format !== \"number\") {\n      format = faker.datatype.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n\n  }\n\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  }\n\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  }\n\n  /**\n   * Returns a random city name\n   * \n   * @method faker.address.cityName\n   */\n  this.cityName = function() {\n    return faker.random.arrayElement(faker.definitions.address.city_name);\n  }\n\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix\n    }\n\n    switch (faker.datatype.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n    return result;\n  }\n\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) { useFullAddress = false; }\n    var address = \"\";\n    switch (faker.datatype.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") +  \" \" + faker.address.streetName();\n        break;\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n    return useFullAddress ? (address + \" \" + faker.address.secondaryAddress()) : address;\n  }\n\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  }\n\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  }\n\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(\n      [\n        'Apt. ###',\n        'Suite ###'\n      ]\n    ));\n  }\n\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  }\n\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  }\n\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   * @param {string} alphaCode default alpha-2\n   */\n  this.countryCode = function (alphaCode) {\n    \n    if (typeof alphaCode === 'undefined' || alphaCode === 'alpha-2') {\n      return faker.random.arrayElement(faker.definitions.address.country_code);\n    }\n\n    if (alphaCode === 'alpha-3') {\n      return faker.random.arrayElement(faker.definitions.address.country_code_alpha_3);\n    }\n      \n    return faker.random.arrayElement(faker.definitions.address.country_code);\n\n  }\n\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  }\n\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  }\n\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   * @param {Double} max default is 90\n   * @param {Double} min default is -90\n   * @param {number} precision default is 4\n   */\n  this.latitude = function (max, min, precision) {\n    max       = max || 90\n    min       = min || -90\n    precision = precision || 4\n\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat((0.0).toPrecision(precision) + '1')\n    }).toFixed(precision);\n  }\n\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   * @param {Double} max default is 180\n   * @param {Double} min default is -180\n   * @param {number} precision default is 4\n   */\n  this.longitude = function (max, min, precision) {\n    max       = max || 180\n    min       = min || -180\n    precision = precision || 4\n\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat((0.0).toPrecision(precision) + '1')\n    }).toFixed(precision);\n  }\n\n  /**\n   *  direction\n   *\n   * @method faker.address.direction\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.direction = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction);\n    }\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr);\n  }\n\n  this.direction.schema = {\n    \"description\": \"Generates a direction. Use optional useAbbr bool to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"South\", \"SW\", \"E\"]\n  };\n\n  /**\n   * cardinal direction\n   *\n   * @method faker.address.cardinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.cardinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return (\n        faker.random.arrayElement(faker.definitions.address.direction.slice(0, 4))\n      );\n    }\n    return (\n      faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(0, 4))\n    );\n  }\n\n  this.cardinalDirection.schema = {\n    \"description\": \"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"North\", \"South\", \"E\", \"W\"]\n  };\n\n  /**\n   * ordinal direction\n   *\n   * @method faker.address.ordinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n  this.ordinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return (\n        faker.random.arrayElement(faker.definitions.address.direction.slice(4, 8))\n      );\n    }\n    return (\n      faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(4, 8))\n    );\n  }\n\n  this.ordinalDirection.schema = {\n    \"description\": \"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"Southeast\", \"SW\", \"NE\"]\n  };\n\n  this.nearbyGPSCoordinate = function(coordinate, radius, isMetric) {\n    function randomFloat(min, max) {\n      return Math.random() * (max-min) + min;\n    }\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI/180.0);\n    }\n    function radiansToDegrees(radians) {\n      return radians * (180.0/Math.PI);\n    }\n    function kilometersToMiles(miles) {\n      return miles * 0.621371;\n    }\n    function coordinateWithOffset(coordinate, bearing, distance, isMetric) {\n      var R = 6378.137; // Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)\n      var d = isMetric ? distance : kilometersToMiles(distance); // Distance in km\n\n      var lat1 = degreesToRadians(coordinate[0]); //Current lat point converted to radians\n      var lon1 = degreesToRadians(coordinate[1]); //Current long point converted to radians\n\n      var lat2 = Math.asin(Math.sin(lat1) * Math.cos(d/R) +\n                Math.cos(lat1) * Math.sin(d/R) * Math.cos(bearing));\n\n      var lon2 = lon1 + Math.atan2(\n        Math.sin(bearing) * Math.sin(d/R) * Math.cos(lat1),\n        Math.cos(d/R) - Math.sin(lat1) * Math.sin(lat2));\n\n      // Keep longitude in range [-180, 180]\n      if (lon2 > degreesToRadians(180)) {\n        lon2 = lon2 - degreesToRadians(360);\n      } else if (lon2 < degreesToRadians(-180)) {\n        lon2 = lon2 + degreesToRadians(360);\n      }\n\n      return [radiansToDegrees(lat2), radiansToDegrees(lon2)];\n    }\n\n    // If there is no coordinate, the best we can do is return a random GPS coordinate.\n    if (coordinate === undefined) {\n      return [faker.address.latitude(), faker.address.longitude()]\n    }\n    radius = radius || 10.0;\n    isMetric = isMetric || false;\n\n    // TODO: implement either a gaussian/uniform distribution of points in cicular region.\n    // Possibly include param to function that allows user to choose between distributions.\n\n    // This approach will likely result in a higher density of points near the center.\n    var randomCoord = coordinateWithOffset(coordinate, degreesToRadians(Math.random() * 360.0), radius, isMetric);\n    return [randomCoord[0].toFixed(4), randomCoord[1].toFixed(4)];\n  }\n\n  /**\n     * Return a random time zone\n     * @method faker.address.timeZone\n     */\n  this.timeZone = function() {\n    return faker.random.arrayElement(faker.definitions.address.time_zone);\n  }\n\n  return this;\n}\n\nmodule.exports = Address;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}