{"ast":null,"code":"/**\n * @namespace faker.git\n */\nvar Git = function (faker) {\n  var self = this;\n  var f = faker.fake;\n  var hexChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n  /**\n   * branch\n   *\n   * @method faker.git.branch\n   */\n\n  self.branch = function () {\n    var noun = faker.hacker.noun().replace(' ', '-');\n    var verb = faker.hacker.verb().replace(' ', '-');\n    return noun + '-' + verb;\n  };\n  /**\n   * commitEntry\n   *\n   * @method faker.git.commitEntry\n   * @param {object} options\n   */\n\n\n  self.commitEntry = function (options) {\n    options = options || {};\n    var entry = 'commit {{git.commitSha}}\\r\\n';\n\n    if (options.merge || faker.datatype.number({\n      min: 0,\n      max: 4\n    }) === 0) {\n      entry += 'Merge: {{git.shortSha}} {{git.shortSha}}\\r\\n';\n    }\n\n    entry += 'Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\\r\\n';\n    entry += 'Date: ' + faker.date.recent().toString() + '\\r\\n';\n    entry += '\\r\\n\\xa0\\xa0\\xa0\\xa0{{git.commitMessage}}\\r\\n';\n    return f(entry);\n  };\n  /**\n   * commitMessage\n   *\n   * @method faker.git.commitMessage\n   */\n\n\n  self.commitMessage = function () {\n    var format = '{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}';\n    return f(format);\n  };\n  /**\n   * commitSha\n   *\n   * @method faker.git.commitSha\n   */\n\n\n  self.commitSha = function () {\n    var commit = \"\";\n\n    for (var i = 0; i < 40; i++) {\n      commit += faker.random.arrayElement(hexChars);\n    }\n\n    return commit;\n  };\n  /**\n   * shortSha\n   *\n   * @method faker.git.shortSha\n   */\n\n\n  self.shortSha = function () {\n    var shortSha = \"\";\n\n    for (var i = 0; i < 7; i++) {\n      shortSha += faker.random.arrayElement(hexChars);\n    }\n\n    return shortSha;\n  };\n\n  return self;\n};\n\nmodule['exports'] = Git;","map":{"version":3,"names":["Git","faker","self","f","fake","hexChars","branch","noun","hacker","replace","verb","commitEntry","options","entry","merge","datatype","number","min","max","date","recent","toString","commitMessage","format","commitSha","commit","i","random","arrayElement","shortSha","module"],"sources":["/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/node_modules/faker/lib/git.js"],"sourcesContent":["/**\n * @namespace faker.git\n */\n\nvar Git = function(faker) {\n  var self = this;\n  var f = faker.fake;\n\n  var hexChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\n  /**\n   * branch\n   *\n   * @method faker.git.branch\n   */\n  self.branch = function() {\n    var noun = faker.hacker.noun().replace(' ', '-');\n    var verb = faker.hacker.verb().replace(' ', '-');\n    return noun + '-' + verb;\n  }\n\n  /**\n   * commitEntry\n   *\n   * @method faker.git.commitEntry\n   * @param {object} options\n   */\n  self.commitEntry = function(options) {\n    options = options || {};\n\n    var entry = 'commit {{git.commitSha}}\\r\\n';\n\n    if (options.merge || (faker.datatype.number({ min: 0, max: 4 }) === 0)) {\n      entry += 'Merge: {{git.shortSha}} {{git.shortSha}}\\r\\n';\n    }\n\n    entry += 'Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\\r\\n';\n    entry += 'Date: ' + faker.date.recent().toString() + '\\r\\n';\n    entry += '\\r\\n\\xa0\\xa0\\xa0\\xa0{{git.commitMessage}}\\r\\n';\n\n    return f(entry);\n  };\n\n  /**\n   * commitMessage\n   *\n   * @method faker.git.commitMessage\n   */\n  self.commitMessage = function() {\n    var format = '{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}';\n    return f(format);\n  };\n\n  /**\n   * commitSha\n   *\n   * @method faker.git.commitSha\n   */\n  self.commitSha = function() {\n    var commit = \"\";\n\n    for (var i = 0; i < 40; i++) {\n      commit += faker.random.arrayElement(hexChars);\n    }\n\n    return commit;\n  };\n\n  /**\n   * shortSha\n   *\n   * @method faker.git.shortSha\n   */\n  self.shortSha = function() {\n    var shortSha = \"\";\n\n    for (var i = 0; i < 7; i++) {\n      shortSha += faker.random.arrayElement(hexChars);\n    }\n\n    return shortSha;\n  };\n\n  return self;\n}\n\nmodule['exports'] = Git;\n"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,GAAG,GAAG,UAASC,KAAT,EAAgB;EACxB,IAAIC,IAAI,GAAG,IAAX;EACA,IAAIC,CAAC,GAAGF,KAAK,CAACG,IAAd;EAEA,IAAIC,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,CAAf;EAEA;AACF;AACA;AACA;AACA;;EACEH,IAAI,CAACI,MAAL,GAAc,YAAW;IACvB,IAAIC,IAAI,GAAGN,KAAK,CAACO,MAAN,CAAaD,IAAb,GAAoBE,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAX;IACA,IAAIC,IAAI,GAAGT,KAAK,CAACO,MAAN,CAAaE,IAAb,GAAoBD,OAApB,CAA4B,GAA5B,EAAiC,GAAjC,CAAX;IACA,OAAOF,IAAI,GAAG,GAAP,GAAaG,IAApB;EACD,CAJD;EAMA;AACF;AACA;AACA;AACA;AACA;;;EACER,IAAI,CAACS,WAAL,GAAmB,UAASC,OAAT,EAAkB;IACnCA,OAAO,GAAGA,OAAO,IAAI,EAArB;IAEA,IAAIC,KAAK,GAAG,8BAAZ;;IAEA,IAAID,OAAO,CAACE,KAAR,IAAkBb,KAAK,CAACc,QAAN,CAAeC,MAAf,CAAsB;MAAEC,GAAG,EAAE,CAAP;MAAUC,GAAG,EAAE;IAAf,CAAtB,MAA8C,CAApE,EAAwE;MACtEL,KAAK,IAAI,8CAAT;IACD;;IAEDA,KAAK,IAAI,uEAAT;IACAA,KAAK,IAAI,WAAWZ,KAAK,CAACkB,IAAN,CAAWC,MAAX,GAAoBC,QAApB,EAAX,GAA4C,MAArD;IACAR,KAAK,IAAI,+CAAT;IAEA,OAAOV,CAAC,CAACU,KAAD,CAAR;EACD,CAdD;EAgBA;AACF;AACA;AACA;AACA;;;EACEX,IAAI,CAACoB,aAAL,GAAqB,YAAW;IAC9B,IAAIC,MAAM,GAAG,sDAAb;IACA,OAAOpB,CAAC,CAACoB,MAAD,CAAR;EACD,CAHD;EAKA;AACF;AACA;AACA;AACA;;;EACErB,IAAI,CAACsB,SAAL,GAAiB,YAAW;IAC1B,IAAIC,MAAM,GAAG,EAAb;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MAC3BD,MAAM,IAAIxB,KAAK,CAAC0B,MAAN,CAAaC,YAAb,CAA0BvB,QAA1B,CAAV;IACD;;IAED,OAAOoB,MAAP;EACD,CARD;EAUA;AACF;AACA;AACA;AACA;;;EACEvB,IAAI,CAAC2B,QAAL,GAAgB,YAAW;IACzB,IAAIA,QAAQ,GAAG,EAAf;;IAEA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BG,QAAQ,IAAI5B,KAAK,CAAC0B,MAAN,CAAaC,YAAb,CAA0BvB,QAA1B,CAAZ;IACD;;IAED,OAAOwB,QAAP;EACD,CARD;;EAUA,OAAO3B,IAAP;AACD,CAhFD;;AAkFA4B,MAAM,CAAC,SAAD,CAAN,GAAoB9B,GAApB"},"metadata":{},"sourceType":"script"}