{"ast":null,"code":"var _jsxFileName = \"/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js\";\n// Import styplesheet for App\nimport './App.css'; // Import React for components\n\nimport React from 'react'; // Import Agent since it will be rendered in appb\n\nimport Agent from './Agent.js'; // Import Environment since it will be rendered in app\n\nimport Environment from './Environment.js'; // Import Agentmpa\n\nimport AgentMap from './AgentMap.js'; // Our top level class (gets rendered in index.html)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  // Constructor for component (set up what our App's state is)\n  constructor(props) {\n    super(props); // State contains a list of agents (json format), and a bool for if the data loaded\n\n    this.state = {\n      agents: [],\n      env_info: [],\n      AgentsLoaded: false,\n      rendered_img: new Image()\n    };\n    this.pos_pass = this.pos_pass.bind(this); // Bind angle pass to this component\n  } // When we renderour App, fetch the agent information\n\n\n  componentDidMount() {\n    // Fetch from our proxy (webserver.py, which when /agents is loaded will return our agents json information),\n    fetch(\"/agents\") // Shorthand for http://localhost:5000/agetns\n    .then(res => res.json()) // Result becomes a json\n    .then(json => {\n      // take the json and set the state vars with it\n      this.setState({\n        agents: json,\n        AgentsLoaded: true\n      });\n    }); // Fetch for env info\n\n    fetch(\"/envInfo\") // Shorthand for http://localhost:5000/agetns\n    .then(res => res.json()) // Result becomes a json\n    .then(json => {\n      // take the json and set the state vars with it\n      this.setState({\n        env_info: json,\n        EnvLoaded: true\n      });\n    }); // Get the rendered image\n\n    const image = new Image();\n    image.src = 'http://localhost:5000/renderedScene';\n    this.setState({\n      rendered_image: image\n    });\n  }\n\n  pos_pass(id, x, y) {\n    let agents = [...this.state.agents];\n    let agent = { ...agents[id]\n    };\n    agent.cur_pos = {\n      'x': x,\n      'y': y\n    };\n    agents[id] = agent;\n    this.setState({\n      agents\n    });\n    console.log(this.state.agents);\n  } // Render Our App Component ( calls to Agent subchildren)\n\n\n  render() {\n    // Pull agents and the data loaded from our state (these were set in componentDidMount)\n    const {\n      AgentsLoaded,\n      EnvLoaded,\n      agents,\n      env_info\n    } = this.state; // If our data didn't load, lets write HTML that we are waiting \n\n    if (!AgentsLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Please wait some time to load Agent information.... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 35\n    }, this);\n    if (!EnvLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Please wait some time to load Environmen information.... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 32\n    }, this); // When our data is loaded, we want to return the HTML/REACT Calls for the APP\n\n    return (\n      /*#__PURE__*/\n      // Div to clump app up into one component to render\n      _jsxDEV(\"div\", {\n        className: \"App\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Fetch data from an api in reacts \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Environment, {\n          max_NS: env_info.max_NS,\n          max_EW: env_info.max_EW,\n          tile_size: env_info.tile_size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(AgentMap, {\n          agents: agents,\n          max_NS: env_info.max_NS,\n          max_EW: env_info.max_EW,\n          tile_size: env_info.tile_size,\n          pos_pass: this.pos_pass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), agents.map(agent =>\n        /*#__PURE__*/\n\n        /* Render an Agent component, with props: agent_id, cur_angle, cur_pos, color */\n        _jsxDEV(Agent, {\n          agent_id: agent.agent_id,\n          cur_angle: agent.cur_angle,\n          cur_pos: agent.cur_pos,\n          color: agent.color,\n          lights: agent.lights\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    ); // End of return\n  }\n\n} // Allow it to be called in other functions\n\n\nexport default App;","map":{"version":3,"names":["React","Agent","Environment","AgentMap","App","Component","constructor","props","state","agents","env_info","AgentsLoaded","rendered_img","Image","pos_pass","bind","componentDidMount","fetch","then","res","json","setState","EnvLoaded","image","src","rendered_image","id","x","y","agent","cur_pos","console","log","render","max_NS","max_EW","tile_size","map","agent_id","cur_angle","color","lights"],"sources":["/Users/mattelacqua/Workspace/duckietown-soid/webserver/web-gui/src/App.js"],"sourcesContent":["// Import styplesheet for App\nimport './App.css';\n\n// Import React for components\nimport React from 'react'\n\n// Import Agent since it will be rendered in appb\nimport Agent from './Agent.js'\n\n// Import Environment since it will be rendered in app\nimport Environment from './Environment.js'\n\n// Import Agentmpa\nimport AgentMap from './AgentMap.js'\n// Our top level class (gets rendered in index.html)\nclass App extends React.Component{\n\n    // Constructor for component (set up what our App's state is)\n    constructor(props) {\n        super(props);\n   \n        // State contains a list of agents (json format), and a bool for if the data loaded\n        this.state = {\n            agents: [],\n            env_info: [],\n            AgentsLoaded: false,\n            rendered_img: new Image(),\n        };\n        this.pos_pass = this.pos_pass.bind(this); // Bind angle pass to this component\n    }\n\n    // When we renderour App, fetch the agent information\n    componentDidMount() {\n        // Fetch from our proxy (webserver.py, which when /agents is loaded will return our agents json information),\n        fetch(\"/agents\") // Shorthand for http://localhost:5000/agetns\n            .then((res) => res.json()) // Result becomes a json\n            .then((json) => { // take the json and set the state vars with it\n                this.setState({\n                    agents: json,\n                    AgentsLoaded: true\n                });\n            });\n\n        // Fetch for env info\n        fetch(\"/envInfo\") // Shorthand for http://localhost:5000/agetns\n            .then((res) => res.json()) // Result becomes a json\n            .then((json) => { // take the json and set the state vars with it\n                this.setState({\n                    env_info: json,\n                    EnvLoaded: true\n                });\n            });\n\n      // Get the rendered image\n      const image = new Image();\n      image.src = 'http://localhost:5000/renderedScene';\n      this.setState({\n        rendered_image: image\n      });\n    }\n   \n    pos_pass(id, x, y) {\n      let agents = [...this.state.agents];\n      let agent = {...agents[id]};\n      agent.cur_pos = {'x': x, \n                       'y': y}\n      agents[id] = agent;\n      this.setState({agents});\n      console.log(this.state.agents);\n    }\n\n    // Render Our App Component ( calls to Agent subchildren)\n    render() {\n        \n        // Pull agents and the data loaded from our state (these were set in componentDidMount)\n        const { AgentsLoaded, EnvLoaded, agents, env_info} = this.state;\n        \n        // If our data didn't load, lets write HTML that we are waiting \n        if (!AgentsLoaded) return <div>\n            <h1> Please wait some time to load Agent information.... </h1> </div> ;\n\n        if (!EnvLoaded) return <div>\n            <h1> Please wait some time to load Environmen information.... </h1> </div> ;\n   \n        // When our data is loaded, we want to return the HTML/REACT Calls for the APP\n        return (\n\n        // Div to clump app up into one component to render\n        <div className = \"App\"> {/* Using app.css stylesheet */}\n            {/* Header text */}\n            <h1> Fetch data from an api in reacts </h1> \n              <Environment  max_NS={env_info.max_NS} \n                            max_EW={env_info.max_EW} \n                            tile_size={env_info.tile_size}/>\n              <AgentMap agents={agents} \n                        max_NS={env_info.max_NS} \n                        max_EW={env_info.max_EW} \n                        tile_size={env_info.tile_size} \n                        pos_pass={this.pos_pass}/>\n                {\n                agents.map((agent) => ( \n                    /* Render an Agent component, with props: agent_id, cur_angle, cur_pos, color */\n                    <Agent agent_id={agent.agent_id} \n                           cur_angle={agent.cur_angle}\n                           cur_pos={agent.cur_pos}\n                           color={agent.color} \n                           lights={agent.lights} />\n                ))\n            }\n\n        </div>\n    ); // End of return\n}\n}\n\n\n// Allow it to be called in other functions\nexport default App;\n"],"mappings":";AAAA;AACA,OAAO,WAAP,C,CAEA;;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,kBAAxB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,eAArB,C,CACA;;;;AACA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;EAE7B;EACAC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN,EADe,CAGf;;IACA,KAAKC,KAAL,GAAa;MACTC,MAAM,EAAE,EADC;MAETC,QAAQ,EAAE,EAFD;MAGTC,YAAY,EAAE,KAHL;MAITC,YAAY,EAAE,IAAIC,KAAJ;IAJL,CAAb;IAMA,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB,CAVe,CAU2B;EAC7C,CAd4B,CAgB7B;;;EACAC,iBAAiB,GAAG;IAChB;IACAC,KAAK,CAAC,SAAD,CAAL,CAAiB;IAAjB,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAC+B;IAD/B,CAEKF,IAFL,CAEWE,IAAD,IAAU;MAAE;MACd,KAAKC,QAAL,CAAc;QACVZ,MAAM,EAAEW,IADE;QAEVT,YAAY,EAAE;MAFJ,CAAd;IAIH,CAPL,EAFgB,CAWhB;;IACAM,KAAK,CAAC,UAAD,CAAL,CAAkB;IAAlB,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAC+B;IAD/B,CAEKF,IAFL,CAEWE,IAAD,IAAU;MAAE;MACd,KAAKC,QAAL,CAAc;QACVX,QAAQ,EAAEU,IADA;QAEVE,SAAS,EAAE;MAFD,CAAd;IAIH,CAPL,EAZgB,CAqBlB;;IACA,MAAMC,KAAK,GAAG,IAAIV,KAAJ,EAAd;IACAU,KAAK,CAACC,GAAN,GAAY,qCAAZ;IACA,KAAKH,QAAL,CAAc;MACZI,cAAc,EAAEF;IADJ,CAAd;EAGD;;EAEDT,QAAQ,CAACY,EAAD,EAAKC,CAAL,EAAQC,CAAR,EAAW;IACjB,IAAInB,MAAM,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,MAAf,CAAb;IACA,IAAIoB,KAAK,GAAG,EAAC,GAAGpB,MAAM,CAACiB,EAAD;IAAV,CAAZ;IACAG,KAAK,CAACC,OAAN,GAAgB;MAAC,KAAKH,CAAN;MACC,KAAKC;IADN,CAAhB;IAEAnB,MAAM,CAACiB,EAAD,CAAN,GAAaG,KAAb;IACA,KAAKR,QAAL,CAAc;MAACZ;IAAD,CAAd;IACAsB,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWC,MAAvB;EACD,CAtD4B,CAwD7B;;;EACAwB,MAAM,GAAG;IAEL;IACA,MAAM;MAAEtB,YAAF;MAAgBW,SAAhB;MAA2Bb,MAA3B;MAAmCC;IAAnC,IAA+C,KAAKF,KAA1D,CAHK,CAKL;;IACA,IAAI,CAACG,YAAL,EAAmB,oBAAO;MAAA,wBACtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADsB;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;IAGnB,IAAI,CAACW,SAAL,EAAgB,oBAAO;MAAA,wBACnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADmB;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CATX,CAYL;;IACA;MAAA;MAEA;MACA;QAAK,SAAS,EAAG,KAAjB;QAAA,6BAEI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGM,QAAC,WAAD;UAAc,MAAM,EAAEZ,QAAQ,CAACwB,MAA/B;UACc,MAAM,EAAExB,QAAQ,CAACyB,MAD/B;UAEc,SAAS,EAAEzB,QAAQ,CAAC0B;QAFlC;UAAA;UAAA;UAAA;QAAA,QAHN,eAMM,QAAC,QAAD;UAAU,MAAM,EAAE3B,MAAlB;UACU,MAAM,EAAEC,QAAQ,CAACwB,MAD3B;UAEU,MAAM,EAAExB,QAAQ,CAACyB,MAF3B;UAGU,SAAS,EAAEzB,QAAQ,CAAC0B,SAH9B;UAIU,QAAQ,EAAE,KAAKtB;QAJzB;UAAA;UAAA;UAAA;QAAA,QANN,EAYQL,MAAM,CAAC4B,GAAP,CAAYR,KAAD;QAAA;;QACP;QACA,QAAC,KAAD;UAAO,QAAQ,EAAEA,KAAK,CAACS,QAAvB;UACO,SAAS,EAAET,KAAK,CAACU,SADxB;UAEO,OAAO,EAAEV,KAAK,CAACC,OAFtB;UAGO,KAAK,EAAED,KAAK,CAACW,KAHpB;UAIO,MAAM,EAAEX,KAAK,CAACY;QAJrB;UAAA;UAAA;UAAA;QAAA,QAFJ,CAZR;MAAA;QAAA;QAAA;QAAA;MAAA;IAHA,EAbK,CAuCN;EACN;;AAjGgC,C,CAqGjC;;;AACA,eAAerC,GAAf"},"metadata":{},"sourceType":"module"}