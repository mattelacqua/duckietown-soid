from typing import Any, cast, Dict, List, NewType, Optional, Sequence, Tuple, Union
from .objmesh import get_mesh, MatInfo, ObjMesh
import numpy as np
from duckietown_world.gltf.export import get_duckiebot_color_from_colorname

class Agent():
    cur_pos: np.ndarray
    cur_angle: np.ndarray
    last_action: np.ndarray
    wheelsVels: np.ndarray
    step_count: int
    start_tile: List[int] 
    start_pose: List[Union[List[Union[float, int]], Union[float, int]]] 
    speed: float 
    color: str 
    timestamp: float 
    agent_id: str 


    def __init__(self,
        cur_pos=[0.0, 0.0, 0.0],
        cur_angle=0.0,
        start_tile=(0, 0),
        start_pose=[[0.0, 0.0, 0.0], 0.0],
        agent_id="ID",
        color="red"):
        
        self.cur_pos = cur_pos
        self.cur_angle = cur_angle
        self.start_tile = start_pose
        self.speed = 0.0
        self.agent_id = agent_id 
        self.last_action = np.array([0, 0])
        self.wheelVels = np.array([0, 0])
        self.timestamp = 0.0
        self.start_tile = start_tile
        self.start_pose = start_pose
        self.state = None
        self.mesh = get_duckiebot_mesh(color)
        self.step_count = 0
        height = 0.05
        self.lights =   {
                        "front_left": [0.1, -0.05, height, False],
                        "front_right": [0.1, +0.05, height, False],
                        "center": [0.1, +0.0, height, False],
                        "back_left": [-0.1, -0.05, height, False],
                        "back_right": [-0.1, +0.05, height, False],
                        }

    # Turn on Specific Light
    def turn_on_light(self, light):
        self.lights[light][3] = True

    # Turn off Specific Light
    def turn_off_light(self, light):
        self.lights[light][3] = False

    # Agent information, takes environment as a parameter
    def get_info(self, env) -> dict:
        info = {}
        pos = self.cur_pos
        angle = self.cur_angle
        # Get the position relative to the right lane tangent

        info["agent_id"] = self.agent_id 
        info["action"] = list(self.last_action)
        info["robot_speed"] = self.speed
        info["cur_pos"] = [float(pos[0]), float(pos[1]), float(pos[2])]
        info["cur_angle"] = float(angle)
        info["wheel_velocities"] = [self.wheelVels[0], self.wheelVels[1]]
        info["tile_coords"] = list(env.get_grid_coords(pos))
        info["lights"] = self.lights 
        misc = {}
        misc["Agent"] = info
        return misc


def get_duckiebot_mesh(color: str) -> ObjMesh:
    change_materials: Dict[str, MatInfo]

    color = np.array(get_duckiebot_color_from_colorname(color))[:3]
    change_materials = {
        "gkmodel0_chassis_geom0_mat_001-material": {"Kd": color},
        "gkmodel0_chassis_geom0_mat_001-material.001": {"Kd": color},
    }

    return get_mesh("duckiebot", change_materials=change_materials)
